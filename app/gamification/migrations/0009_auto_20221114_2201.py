# Generated by Django 3.2 on 2022-11-15 06:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('gamification', '0008_auto_20221001_1554'),
    ]

    operations = [
        migrations.CreateModel(
            name='Constraint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('met', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('threshold', models.IntegerField()),
            ],
            options={
                'verbose_name': 'constraint',
                'verbose_name_plural': 'constraints',
                'db_table': 'constraints',
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'reward',
                'verbose_name_plural': 'rewards',
                'db_table': 'rewards',
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default', models.BooleanField(default=False)),
                ('name', models.CharField(blank=True, max_length=150, verbose_name='Rule name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'rule',
                'verbose_name_plural': 'rules',
                'db_table': 'rules',
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('constraint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gamification.constraint')),
            ],
            options={
                'verbose_name': 'action',
                'verbose_name_plural': 'actions',
                'db_table': 'actions',
            },
            bases=('gamification.constraint',),
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('constraint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gamification.constraint')),
            ],
            options={
                'verbose_name': 'point',
                'verbose_name_plural': 'points',
                'db_table': 'points',
            },
            bases=('gamification.constraint',),
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.reward')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user reward',
                'verbose_name_plural': 'user rewards',
                'db_table': 'user_reward',
            },
        ),
        migrations.AddField(
            model_name='reward',
            name='rule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.rule'),
        ),
        migrations.CreateModel(
            name='CourseRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.course')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.rule')),
            ],
            options={
                'verbose_name': 'course rule',
                'verbose_name_plural': 'course_rules',
                'db_table': 'course_rules',
            },
        ),
        migrations.AddField(
            model_name='constraint',
            name='rule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.rule'),
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.rule')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.registration')),
            ],
            options={
                'verbose_name': 'achievement',
                'verbose_name_plural': 'achievements',
                'db_table': 'achievements',
            },
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cur_point', models.FloatField(blank=True, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.registration')),
                ('point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.point')),
            ],
            options={
                'verbose_name': 'progress',
                'verbose_name_plural': 'progresses',
                'db_table': 'progresses',
            },
        ),
    ]
